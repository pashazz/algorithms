* Algorithm Implementations

** lis-dynamic

 Longest Increasing Sequence and Longest Alternating sequence using Dynamic Programming with Java.

*** Complexity
 \[
 O(n^2)
 \]

*** Reference
https://www.youtube.com/watch?v=fV-TF4OvZpk

** lis-cpp

 Longest Alternating Sequence

*** using dynamic programming

 [[./lis-cpp/dynamic.h]]

 \[
 O(n^2)
 \]


*** using linear method (finding points where the gradient changes)

 [[./lis-cpp/sequence.h]]

 \[
 O(n)
 \]

** sort

see [[./sort/README.org]]

** quicksort

Quicksort java implementation with random pivot - O(nlogn) complexity on average.



*** TODO eliminate tail recursion like:

Оценка по памяти будет O(log n) вместо O(n).

#+BEGIN_SRC cpp
struct Window {
vector<T> *vec;
size_t begin;
size_t end;

size_t size() {
return end - begin;
}

Window(vec, begin, end) :vec(vec),begin(begin),end(end){}

}

std::pair<Window, Window> qsort(Window a) {
while (a.size() > 1) {
left, right = partition(a, pivot);
if (left.size() > right.size()) {
qsort(right);
left = a;
} else {
qsort(left);
right = a;
}
}
#+END_SRC

Здесь рекурсия идет только по меньшему поддереву, а, поскольку высота меньшего отрезка максимум половина от данного отрезка, то высота дерева рекурсии будет log n.
